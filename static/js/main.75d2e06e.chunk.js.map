{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","value","inputText","onChange","e","setInputText","target","type","className","onClick","preventDefault","setTodos","todos","text","completed","id","Math","random","setIsDone","name","Todo","todo","todoText","map","item","filter","el","TodoList","filteredTodos","key","App","useState","isDone","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","localTodos","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75d2e06e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Form = (props) =>\r\n {\r\n   //here I can write javascript code and functions\r\n   const inputTextHandler = (e) =>\r\n   {\r\n     //console.log(e.target.value);\r\n     props.setInputText(e.target.value);\r\n   }\r\n   const submitTodoHandler = (e) =>\r\n   {\r\n     e.preventDefault();\r\n     props.setTodos([\r\n      ...props.todos,\r\n       {text: props.inputText, completed: false, id: Math.random() * 1000}\r\n\r\n     ]);\r\n     props.setInputText('');\r\n   }\r\n\r\n   const doneHandler = (e) =>\r\n   {\r\n      props.setIsDone(e.target.value);\r\n   }\r\n\r\n    return(\r\n        <form>\r\n            <input value={props.inputText} onChange={inputTextHandler} \r\n            type = \"text\" className = \"todo-input\" />\r\n            <button onClick={submitTodoHandler} className = \"todo-button\" type =\"submit\">\r\n              <i className = \"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n              <select onChange={doneHandler} name = \"todos\" className=\"filter-todo\">\r\n                <option value=\"all\">All</option>\r\n                <option value=\"completed\">Completed</option>\r\n                <option value=\"uncompleted\">Uncompleted</option>\r\n              </select>\r\n            </div>\r\n        </form>\r\n    );//end return\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = (props) =>\r\n{\r\n    //Events\r\n    const deleteHandler = () =>\r\n    {\r\n        props.setTodos(props.todos.filter(\r\n            (el) => el.id != props.todo.id)\r\n            );\r\n    }\r\n\r\n    const completeHandler = () =>\r\n    {\r\n        props.setTodos(\r\n            props.todos.map(\r\n                (item) => \r\n                {\r\n                    if(item.id == props.todo.id)\r\n                    {\r\n                        return {\r\n                            ...item, completed: !item.completed\r\n                        }\r\n                    }\r\n                    return item;\r\n                }\r\n            ));\r\n    }\r\n\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${props.todo.completed ? 'completed' : ''}`}>{props.todoText}</li>\r\n            <button onClick={completeHandler} className='complete-btn'>\r\n                <i className='fas fa-check'></i>\r\n            </button> \r\n            <button onClick={deleteHandler} className='trash-btn'>\r\n                <i className='fas fa-trash'></i>\r\n            </button> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react'\r\n//import components\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = (props) =>\r\n{\r\n\r\n    return(\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {props.filteredTodos.map( (todo) =>\r\n                (   \r\n                    <Todo \r\n                        todoText={todo['text']} \r\n                        key={todo.id} \r\n                        setTodos={props.setTodos}\r\n                        todos={props.todos}\r\n                        todo={todo}\r\n                    />\r\n                ) )}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\n//importing components\nimport Form from \"./components/Form\";\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  \n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);//array of objects\n  const [isDone, setIsDone] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  //use effect\n  useEffect( () =>\n  {\n    getLocalTodos();\n  }, [])\n\n  useEffect(() =>\n  {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, isDone])\n  //end use effect\n  const filterHandler = () =>\n  {\n    switch(isDone)\n    {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed == false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  }\n  //save to local\n  const saveLocalTodos = () =>\n  {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }\n  const getLocalTodos = () =>\n  {\n    if(localStorage.getItem('todos') === null)\n    {\n      localStorage.setItem('todos', JSON.stringify([]));\n    }else\n    {\n      let localTodos = JSON.parse(localStorage.getItem('todos'));\n      setTodos(localTodos)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>My Todo List</h1>\n      </header>\n      <Form \n      inputText={inputText} setInputText={setInputText} \n      todos={todos} setTodos={setTodos} \n      isDone={isDone}\n      setIsDone={setIsDone}\n      />\n\n      <TodoList \n      todos={todos}\n      filteredTodos={filteredTodos} \n      setTodos={setTodos}\n      isDone={isDone}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}